---Non terminals should start from small letters and terminals from capital letters. Separator is => and 1st 2 lines of Grammar Text file should not have any function. EPSILON deriving rule should be last rule for each Non Terminal deriving EPSILON. First Line is for any comments and second line to write number of rules.
44
mainFunction => MAIN SQO SQC stmtsAndFunctionDefs END
stmtsAndFunctionDefs => stmtOrFunctionDef stmtsAndFunctionDefs2
stmtsAndFunctionDefs2 => stmtsAndFunctionDefs | EPSILON
stmtOrFunctionDef => stmt | functionDef
stmt => declarationStmt | assignmentStmt_type1 | assignmentStmt_type2 | ifStmt | ioStmt | funCallStmt SEMICOLON
functionDef => FUNCTION SQO parameter_list SQC ASSIGNOP FUNID SQO parameter_list SQC stmtsAndFunctionDefs END SEMICOLON
parameter_list => type ID remainingList | EPSILON
type => INT | REAL | STRING | MATRIX
remainingList => COMMA parameter_list | EPSILON
declarationStmt => type var_list SEMICOLON
var_list => ID more_ids
more_ids => COMMA var_list | EPSILON
assignmentStmt_type1 => leftHandSide_singleVar ASSIGNOP rightHandSide_type1 SEMICOLON
assignmentStmt_type2 => leftHandSide_listVar ASSIGNOP rightHandSide_type2 SEMICOLON
leftHandSide_singleVar => ID
leftHandSide_listVar => SQO var_list SQC
rightHandSide_type1 => arithmeticExpression | sizeExpression | funCallStmt
rightHandSide_type2 => sizeExpression | funCallStmt
sizeExpression => SIZE ID
ifStmt => IF OP booleanExpression CL stmt otherStmts elsePart SEMICOLON
elsePart => ELSE stmt otherStmts ENDIF | ENDIF
otherStmts => stmt otherStmts | EPSILON
ioStmt => READ OP ID CL SEMICOLON | PRINT OP ID CL SEMICOLON
funCallStmt => FUNID OP inputParameterList CL
inputParameterList => var listVar | EPSILON
listVar => COMMA inputParameterList | EPSILON
arithmeticExpression => arithmeticTerm arithmeticExpression2
arithmeticExpression2 => operator_lowPrecedence arithmeticTerm arithmeticExpression2 | EPSILON
arithmeticTerm => factor arithmeticTerm2
arithmeticTerm2 => operator_highPrecedence factor arithmeticTerm2 | EPSILON
factor => OP arithmeticExpression CL | var
operator_lowPrecedence => PLUS | MINUS
operator_highPrecedence => MUL | DIV
booleanExpression => OP booleanExpression CL logicalOp OP booleanExpression CL | constrainedVars relationalOp constrainedVars | NOT OP booleanExpression CL
constrainedVars => ID | NUM | RNUM 
var => ID matrixElement | NUM | RNUM | STR | matrixDeclaration
matrixElement => SQO NUM COMMA NUM SQC | EPSILON
matrixDeclaration => SQO rows SQC
rows => row rows2
rows2 => SEMICOLON rows | EPSILON
row => NUM row2
row2 => COMMA row | EPSILON
logicalOp => AND | OR
relationalOp => LT | LE | EQ | GT | GE | NE